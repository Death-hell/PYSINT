#!/usr/bin/env python3
"""
malware-testScan.py - Local Malware Scanner for PYSINT Suite
Author: YourNameHere
License: MIT
Repository: ~/PYSINT

Features:
- Scan local directories for potentially malicious files
- Checks suspicious extensions and content patterns
- Saves results to JSON/CSV in ~/PYSINT/results
- CLI mode (--path, --max-size, etc.) + Interactive fallback
- Debug mode (--debug) to log skipped files, read errors, and scan details
- Help (--help) via argparse (native)
"""

import os
import asyncio
import json
import csv
import time
import argparse
from pathlib import Path
from datetime import datetime

from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn
from rich.prompt import Prompt, Confirm

# ================== DEFAULTS ==================
DEFAULT_SUSPICIOUS_EXT = [".exe", ".bat", ".vbs", ".js", ".scr", ".dll", ".ps1", ".jar", ".py", ".sh"]
DEFAULT_SUSPICIOUS_STRINGS = [
    "eval(",
    "powershell",
    "cmd.exe",
    "base64",
    "wget ",
    "curl ",
    "Invoke-",
    "DownloadFile",
    "shell(",
    "os.system",
    "subprocess.",
    "reg add",
    "net user",
    "net localgroup",
    "schtasks",
    "at ",
    "certutil",
    "bitsadmin",
    "mshta",
    "rundll32",
    "wscript",
    "cscript"
]
DEFAULT_MAX_FILE_SIZE = 1024 * 1024  # 1MB
DEFAULT_RESULTS_DIR = Path(os.path.expanduser("~/PYSINT/results"))
DEFAULT_RESULTS_DIR.mkdir(parents=True, exist_ok=True)

console = Console()


# ================== CORE FUNCTION ==================
async def analyze_file(path: str, max_size: int, suspicious_ext: list, suspicious_strings: list, debug: bool = False):
    """Analyze a single file for malware indicators"""
    reasons = []
    file_path = Path(path)

    # Check if file exists and is readable
    if not file_path.exists():
        if debug:
            console.print(f"[DEBUG] File not found: {path}")
        return None

    # Check file size
    try:
        file_size = file_path.stat().st_size
        if file_size > max_size:
            if debug:
                console.print(f"[DEBUG] Skipping {path} (size: {file_size} bytes > limit: {max_size} bytes)")
            return None
    except Exception as e:
        if debug:
            console.print(f"[DEBUG] Error getting file size for {path}: {e}")
        return None

    # Check suspicious extensions
    if any(file_path.suffix.lower() == ext.lower() for ext in suspicious_ext):
        reasons.append("Suspicious Extension")

    # Try to read file content
    try:
        with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
            content = f.read().lower()

            # Check for suspicious strings
            for s in suspicious_strings:
                if s.lower() in content:
                    reasons.append(f"Contains '{s}'")

    except PermissionError:
        if debug:
            console.print(f"[yellow]⚠️ Permission denied: {path}[/yellow]")
        return None
    except UnicodeDecodeError:
        # Binary file - skip content analysis
        if debug:
            console.print(f"[DEBUG] Binary file (UnicodeDecodeError): {path}")
        pass
    except Exception as e:
        if debug:
            console.print(f"[DEBUG] Error reading file {path}: {e}")
        return None

    if reasons:
        return {
            "path": str(file_path),
            "size_bytes": file_size,
            "reasons": reasons,
            "extension": file_path.suffix,
            "error": None
        }
    else:
        return None


# ================== MAIN SCAN FUNCTION ==================
async def scan_folder(
    folder: str,
    max_size: int,
    suspicious_ext: list,
    suspicious_strings: list,
    debug: bool
):
    """Scan a folder for potentially malicious files"""
    folder_path = Path(folder)
    if not folder_path.exists() or not folder_path.is_dir():
        console.print(f"[red]❌ Folder does not exist or is not a directory: {folder}[/red]")
        return []

    # Collect all files
    files_to_scan = []
    for root, dirs, files in os.walk(folder):
        for file in files:
            files_to_scan.append(os.path.join(root, file))

    if not files_to_scan:
        console.print("[yellow]No files found to scan.[/yellow]")
        return []

    console.print(f"[cyan]Found {len(files_to_scan)} files to analyze...[/cyan]")

    # Create tasks
    tasks = []
    for file_path in files_to_scan:
        task = analyze_file(file_path, max_size, suspicious_ext, suspicious_strings, debug)
        tasks.append(task)

    # Process with progress bar
    results = []
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TextColumn("{task.completed}/{task.total} files"),
        TimeElapsedColumn(),
        console=console
    ) as progress:
        task_id = progress.add_task("[cyan]Scanning files...", total=len(tasks))

        for coro in asyncio.as_completed(tasks):
            res = await coro
            if res:
                results.append(res)
            progress.advance(task_id)

    return results


# ================== UTILS ==================
def display_results(results: list, folder: str):
    """Display results in rich table"""
    if results:
        table = Table(title=f"Malware Scan Results for {folder}", show_lines=True)
        table.add_column("File Path", style="cyan", no_wrap=False)
        table.add_column("Size (bytes)", style="yellow", justify="right")
        table.add_column("Suspicion Reason", style="red")

        for item in results:
            table.add_row(
                item["path"],
                str(item["size_bytes"]),
                ", ".join(item["reasons"])
            )

        console.print(table)
        console.print(f"\n[bold red]⚠️  Found {len(results)} suspicious files.[/bold red]")
    else:
        console.print(f"\n[green]✅ No suspicious files found in {folder}.[/green]")


def save_results(results: list, folder: str, prefix: str = "malware_scan", results_dir: Path = DEFAULT_RESULTS_DIR):
    """Save results as JSON and CSV with timestamp"""
    ts = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
    safe_folder = folder.replace('/', '_').replace('\\', '_').replace(':', '_')
    json_path = results_dir / f"{prefix}_{safe_folder}_{ts}.json"
    csv_path = results_dir / f"{prefix}_{safe_folder}_{ts}.csv"

    # Save JSON
    try:
        with open(json_path, "w", encoding="utf-8") as jf:
            json.dump(results, jf, indent=2, ensure_ascii=False)
    except Exception as e:
        console.print(f"[red]Failed to save JSON results: {e}[/red]")
        json_path = None

    # Save CSV
    if results:
        try:
            with open(csv_path, "w", newline="", encoding="utf-8") as cf:
                fieldnames = ["path", "size_bytes", "extension", "reasons", "error"]
                writer = csv.DictWriter(cf, fieldnames=fieldnames)
                writer.writeheader()
                for r in results:
                    writer.writerow({
                        "path": r["path"],
                        "size_bytes": r["size_bytes"],
                        "extension": r["extension"],
                        "reasons": "; ".join(r["reasons"]),
                        "error": r.get("error", "")
                    })
        except Exception as e:
            console.print(f"[red]Failed to save CSV results: {e}[/red]")
            csv_path = None

    return json_path, csv_path


# ================== ARGUMENT PARSER ==================
def parse_args():
    parser = argparse.ArgumentParser(
        description="PYSINT Malware Scanner — Local File System Analyzer",
        epilog="Example: python3 malware-testScan.py --path /home/user/Downloads --max-size 2097152 --debug"
    )
    parser.add_argument("--path", "-p", help="Path to folder to scan")
    parser.add_argument("--max-size", type=int, default=DEFAULT_MAX_FILE_SIZE, help=f"Maximum file size to scan in bytes (default: {DEFAULT_MAX_FILE_SIZE})")
    parser.add_argument("--extensions", help="Comma-separated list of suspicious extensions (e.g., '.exe,.bat,.vbs')")
    parser.add_argument("--strings", help="Comma-separated list of suspicious strings (e.g., 'powershell,cmd.exe,base64')")
    parser.add_argument("--debug", action="store_true", help="Enable debug output (shows skipped files and errors)")
    # ✅ --help is handled automatically by argparse

    return parser.parse_args()


# ================== MAIN ==================
def main():
    args = parse_args()

    console.rule("[bold red]PYSINT Malware Scanner[/bold red]")

    # If no path provided, fallback to interactive mode
    if not args.path:
        folder = Prompt.ask("[bold cyan]Enter folder to scan")
        if not folder or not os.path.exists(folder):
            console.print("[red]Folder does not exist. Exiting.[/red]")
            return

        max_size_input = Prompt.ask(f"[bold yellow]Maximum file size to scan (bytes, default: {DEFAULT_MAX_FILE_SIZE})", default=str(DEFAULT_MAX_FILE_SIZE))
        max_size = int(max_size_input) if max_size_input.isdigit() else DEFAULT_MAX_FILE_SIZE

        ext_input = Prompt.ask(f"[bold yellow]Suspicious extensions (comma-separated, default: {','.join(DEFAULT_SUSPICIOUS_EXT)})", default=",".join(DEFAULT_SUSPICIOUS_EXT))
        suspicious_ext = [ext.strip() for ext in ext_input.split(",")] if ext_input else DEFAULT_SUSPICIOUS_EXT

        strings_input = Prompt.ask(f"[bold yellow]Suspicious strings (comma-separated, default: first 5 items)", default=",".join(DEFAULT_SUSPICIOUS_STRINGS[:5]))
        suspicious_strings = [s.strip() for s in strings_input.split(",")] if strings_input else DEFAULT_SUSPICIOUS_STRINGS[:5]

        debug = Confirm.ask("[bold yellow]Enable debug mode?", default=False)

    else:
        # CLI mode
        folder = args.path
        max_size = args.max_size
        debug = args.debug

        if args.extensions:
            suspicious_ext = [ext.strip() for ext in args.extensions.split(",")]
        else:
            suspicious_ext = DEFAULT_SUSPICIOUS_EXT

        if args.strings:
            suspicious_strings = [s.strip() for s in args.strings.split(",")]
        else:
            suspicious_strings = DEFAULT_SUSPICIOUS_STRINGS

    # Validate folder
    if not os.path.exists(folder):
        console.print(f"[red]❌ Folder does not exist: {folder}[/red]")
        return

    # Run scan
    console.print(f"\n[bold yellow]🔍 Scanning folder: [bold green]{folder}[/bold green][/bold yellow]")
    console.print(f"[cyan]Max file size: {max_size} bytes[/cyan]")
    console.print(f"[cyan]Suspicious extensions: {', '.join(suspicious_ext)}[/cyan]")
    console.print(f"[cyan]Suspicious strings: {', '.join(suspicious_strings[:3])}{'...' if len(suspicious_strings) > 3 else ''}[/cyan]\n")

    start_time = time.time()
    results = asyncio.run(scan_folder(folder, max_size, suspicious_ext, suspicious_strings, debug))
    duration = time.time() - start_time

    # Display results
    display_results(results, folder)
    console.print(f"\n[bold green]✅ Scan finished in {duration:.1f}s. Analyzed {len(results)} suspicious files out of {sum(1 for _ in Path(folder).rglob('*') if _.is_file())} total files.[/bold green]")

    # Save results
    json_path, csv_path = save_results(results, folder)
    saved = []
    if json_path:
        saved.append(str(json_path))
    if csv_path:
        saved.append(str(csv_path))
    if saved:
        console.print(f"[green]💾 Results saved to:[/green] {', '.join(saved)}")
    else:
        console.print("[yellow]⚠️  No results were saved (I/O error).[/yellow]")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        console.print("\n[red]🛑 Scan interrupted by user.[/red]")
    except Exception as e:
        console.print(f"[red]❌ Unexpected error: {e}[/red]")
